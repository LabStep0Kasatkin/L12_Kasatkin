# bot.py
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
import requests
from config import BOT_TOKEN, WEATHER_API_KEY
from database import get_users, init_db, add_or_update_user, get_user
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from config import ADMIN_ID

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

class Registration(StatesGroup):
    gender = State()
    notification_hour = State()
    notification_minute = State()
    notification_freq = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_main_keyboard(is_admin=False):
    buttons = [
        [KeyboardButton(text="–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É")],
        [KeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")]
    ]
    if is_admin:
        buttons.append([KeyboardButton(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
gender_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ú—É–∂—Å–∫–æ–π"), KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —á–∞—Å–∞–º–∏ (0-23)
def get_hour_kb():
    buttons = []
    row = []
    for h in range(0, 24):
        row.append(KeyboardButton(text=str(h)))
        if len(row) == 6:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –º–∏–Ω—É—Ç–∞–º–∏ (0-59, —à–∞–≥ 5)
def get_minute_kb():
    buttons = []
    row = []
    for m in range(0, 60, 5):
        row.append(KeyboardButton(text=str(m)))
        if len(row) == 6:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=True)


def get_weather_smile(temp_c):
    if temp_c < 0:
        return "‚ùÑÔ∏è"
    elif 0 <= temp_c < 15:
        return "üß•"
    elif 15 <= temp_c < 25:
        return "üå§Ô∏è"
    else:
        return "üî•"

@dp.message(CommandStart())
async def start(message: Message):
    is_admin = message.from_user.id == int(ADMIN_ID)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã.", reply_markup=get_main_keyboard(is_admin))

@dp.message(F.text == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def show_users(message: Message):
    if str(message.from_user.id) != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    users = await get_users()

    if not users:
        await message.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    output = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user in users:
        telegram_id, username, gender, time, freq = user
        output += (
            f"Telegram ID: {telegram_id}\n"
            f"–ò–º—è: {username or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"–ü–æ–ª: {gender}\n"
            f"–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {time}\n"
            f"–ß–∞—Å—Ç–æ—Ç–∞: {freq}\n"
            "--------------------\n"
        )

    if len(output) > 4096:
        for chunk in [output[i:i + 4096] for i in range(0, len(output), 4096)]:
            await message.answer(chunk)
    else:
        await message.answer(output)

@dp.message(F.text == "–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É")
async def get_weather(message: Message):
    url = f"https://api.weatherapi.com/v1/current.json?key={WEATHER_API_KEY}&q=Moscow"

    response = requests.get(url)
    data = response.json()

    if "error" in data:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã.")
        return

    temp_c = data["current"]["temp_c"]
    emoji = get_weather_smile(temp_c)
    await message.answer(f"{emoji} –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –ú–æ—Å–∫–≤–µ: {temp_c}¬∞C")

@dp.message(F.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def registration_start(message: Message, state: FSMContext):
    await state.set_state(Registration.gender)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=gender_kb)


@dp.message(Registration.gender)
async def registration_gender(message: Message, state: FSMContext):
    gender = message.text
    if gender not in ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
        return
    await state.update_data(gender=gender)
    await state.set_state(Registration.notification_hour)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", reply_markup=get_hour_kb())


@dp.message(Registration.notification_hour)
async def registration_hour(message: Message, state: FSMContext):
    hour = message.text
    if not hour.isdigit() or not (0 <= int(hour) <= 23):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
        return
    await state.update_data(notification_hour=hour)
    await state.set_state(Registration.notification_minute)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", reply_markup=get_minute_kb())


@dp.message(Registration.notification_minute)
async def registration_minute(message: Message, state: FSMContext):
    minute = message.text
    if not minute.isdigit() or not (0 <= int(minute) <= 59) or int(minute) % 5 != 0:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
        return
    await state.update_data(notification_minute=minute)
    await state.set_state(Registration.notification_freq)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –∏–ª–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ):", reply_markup=ReplyKeyboardRemove())


@dp.message(Registration.notification_freq)
async def registration_notification_freq(message: Message, state: FSMContext):
    freq = message.text
    data = await state.get_data()
    user_data = {
        "telegram_id": message.from_user.id,
        "username": message.from_user.username,
        "gender": data["gender"],
        "notification_time": f"{data['notification_hour']}:{data['notification_minute']}",
        "notification_freq": freq
    }
    await add_or_update_user(**user_data)
    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=get_main_keyboard())
    await state.clear()
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())