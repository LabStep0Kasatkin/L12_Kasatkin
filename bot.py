# bot.py
from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
import requests
from config import BOT_TOKEN, WEATHER_API_KEY, ADMIN_ID
from database import get_users, init_db, add_or_update_user, get_user

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# --- FSM –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ---
class Registration(StatesGroup):
    gender = State()
    notification_hour = State()
    notification_minute = State()
    notification_freq = State()

# --- INLINE –ö–ù–û–ü–ö–ò ---

def get_main_inline_keyboard(is_admin=False):
    buttons = [
        [InlineKeyboardButton(text="–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É", callback_data="weather")],
        [InlineKeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register")]
    ]
    if is_admin:
        buttons.append([InlineKeyboardButton(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="users")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

gender_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", callback_data="gender_male"),
     InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female")]
])

def get_hour_kb():
    buttons = []
    row = []
    for h in range(0, 24):
        row.append(InlineKeyboardButton(text=str(h), callback_data=f"hour_{h}"))
        if len(row) == 6:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_minute_kb():
    buttons = []
    row = []
    for m in range(0, 60, 5):
        row.append(InlineKeyboardButton(text=str(m), callback_data=f"minute_{m}"))
        if len(row) == 6:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- –°–ú–ê–ô–õ–ò–ö–ò –ü–û–ì–û–î–´ ---
def get_weather_smile(temp_c):
    if temp_c < 0:
        return "‚ùÑÔ∏è"
    elif 0 <= temp_c < 15:
        return "üß•"
    elif 15 <= temp_c < 25:
        return "üå§Ô∏è"
    else:
        return "üî•"

# --- –û–°–ù–û–í–ù–´–ï –•–ï–ù–î–õ–ï–†–´ ---

@dp.message(F.text)
async def start(message: Message):
    await message.delete()  # —É–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã
    is_admin = message.from_user.id == int(ADMIN_ID)
    await bot.send_message(
        chat_id=message.chat.id,
        text="–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã.",
        reply_markup=get_main_inline_keyboard(is_admin)
    )

# --- INLINE HANDLERS ---
@dp.callback_query(F.data == "weather")
async def get_weather(callback: CallbackQuery):
    url = f"https://api.weatherapi.com/v1/current.json?key={WEATHER_API_KEY}&q=Moscow"
    response = requests.get(url)
    data = response.json()

    if "error" in data:
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã.", show_alert=True)
        return

    temp_c = data["current"]["temp_c"]
    emoji = get_weather_smile(temp_c)
    await callback.message.edit_text(f"{emoji} –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –ú–æ—Å–∫–≤–µ: {temp_c}¬∞C", reply_markup=get_main_inline_keyboard())

@dp.callback_query(F.data == "users")
async def show_users(callback: CallbackQuery):
    if str(callback.from_user.id) != ADMIN_ID:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", show_alert=True)
        return

    users = await get_users()
    output = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    if not users:
        await callback.message.edit_text("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=get_main_inline_keyboard())
        return

    for user in users:
        telegram_id, username, gender, time, freq = user
        output += (
            f"Telegram ID: {telegram_id}\n"
            f"–ò–º—è: {username or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"–ü–æ–ª: {gender}\n"
            f"–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {time}\n"
            f"–ß–∞—Å—Ç–æ—Ç–∞: {freq}\n"
            "--------------------\n"
        )

    if len(output) > 4096:
        parts = [output[i:i + 4096] for i in range(0, len(output), 4096)]
        await callback.message.edit_text(parts[0])
        for part in parts[1:]:
            await bot.send_message(callback.message.chat.id, part)
    else:
        await callback.message.edit_text(output, reply_markup=get_main_inline_keyboard())

    await callback.answer()

@dp.callback_query(F.data == "register")
async def registration_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Registration.gender)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=gender_kb)

# --- –ì–ï–ù–î–ï–† --- 
@dp.callback_query(F.data.startswith("gender_"))
async def registration_gender(callback: CallbackQuery, state: FSMContext):
    gender = "–ú—É–∂—Å–∫–æ–π" if callback.data == "gender_male" else "–ñ–µ–Ω—Å–∫–∏–π"
    await state.update_data(gender=gender)
    await state.set_state(Registration.notification_hour)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", reply_markup=get_hour_kb())

# --- –ß–ê–° ---
@dp.callback_query(F.data.startswith("hour_"))
async def registration_hour(callback: CallbackQuery, state: FSMContext):
    hour = callback.data.split("_")[1]
    await state.update_data(notification_hour=hour)
    await state.set_state(Registration.notification_minute)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", reply_markup=get_minute_kb())

# --- –ú–ò–ù–£–¢–´ ---
@dp.callback_query(F.data.startswith("minute_"))
async def registration_minute(callback: CallbackQuery, state: FSMContext):
    minute = callback.data.split("_")[1]
    await state.update_data(notification_minute=minute)
    await state.set_state(Registration.notification_freq)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –∏–ª–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ):")

# --- –ß–ê–°–¢–û–¢–ê ---
@dp.message(Registration.notification_freq)
async def registration_notification_freq(message: Message, state: FSMContext):
    freq = message.text
    data = await state.get_data()
    user_data = {
        "telegram_id": message.from_user.id,
        "username": message.from_user.username,
        "gender": data["gender"],
        "notification_time": f"{data['notification_hour']}:{data['notification_minute']}",
        "notification_freq": freq
    }
    await add_or_update_user(**user_data)
    await message.delete()
    await bot.send_message(
        chat_id=message.chat.id,
        text="–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!",
        reply_markup=get_main_inline_keyboard()
    )
    await state.clear()

# --- MAIN ---
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())